package bootstrap "Functions to faciltate load and save source and binary files- Krever ACF_Plugin 1.5.1.0 som minimum. ";/*	Load the content of a file into a string variable. 	*/function LoadFile (string filename)	FunctionID 200;	string content; 	int x; 	x = open (filename, "r"); 	content = read (x); 	close ( x ) ; 	return content; end/*	Write the content of a string variable to a file. It can contain many lines of text. 	*/function SaveFile (string filename, string content )	FunctionID 201;	int x; 	x = open (filename, "w"); 	write (x, content); 	close ( x ); 	return 1; end/*	Select a file and retrieve the content. The selected filename is stored in the global variable $$FileName	*/function SelectAndGetFile (string startPath, string Prompt)	FunctionID 202;	string cc = "";	string filename = select_file (Prompt, startPath); 	if (filename != "") then		 cc = LoadFile(filename); 	end if	$$FileName = filename;  	return cc; end/*	Select a folder and return its path. If the path is empty, the user has cancelled. 	*/function SelectFolder ( string prompt ) 	FunctionID 203; 	string folder = select_directory ( prompt ) ; 	return folder; end/*	Check if a given directory exists. On Mac, also check with /Volumes/ prefix if the path fails. 	*/function DirectoryExists ( string DirectoryPath ) 	FunctionID 204; 	if ( isMac ) then		DirectoryPath = substitute ( DirectoryPath, ":", "/");		if ( ! directory_exists ( DirectoryPath ) ) then			if ( left ( DirectoryPath, 1 ) != "/") then				DirectoryPath = "/Volumes/" + DirectoryPath; 			else				return false; 			end if		else 			return true; 		end if	else		DirectoryPath = substitute ( DirectoryPath, "/", "\\");	end if	return directory_exists ( DirectoryPath ) ; end/*	Get the last part of a full path ( only the filename )	*/function GetFilenameFromPath ( string path ) 	FunctionID 205; 	path = substitute ( path, ":", "/");	path = substitute ( path, "\\", "/");	return regex_replace("^(.+)/(.+\..+)$", path, "\2");end/*	Get the directory part of a full path, removing the filename. 	*/function GetDirectoriesFromPath ( string path ) 	FunctionID 206; 	path = substitute ( path, ":", "/");	path = substitute ( path, "\\", "/");	return regex_replace("^(.+)/(.+\..+)$", path, "\1");end/*	Get only the file type of a full path. 	*/function GetExtentionFromPath ( string path ) 	FunctionID 207; 	path = substitute ( path, ":", "/");	path = substitute ( path, "\\", "/");	return regex_replace("^(.+/)(.+\.)(.+)$", path, "\3");end/*	Select a file, without opening it. Returns the file path, or empty string if the user has canselled the dialogue. 	*/function SelectFileOnly (string startPath, string Prompt)	FunctionID 208;	string cc = "";	return select_file (Prompt, startPath); end/*	Select a file for saving file. Does not create the file. 	*/function SaveFileDialogue ( string prompt, string proposed_folder, string proposed_name ) 	functionID 209; 	string newfn = save_file_dialogue (prompt, proposed_folder, proposed_name) ; 	return newfn; end/*	Opens a fle for write. Returns the open-file number to be used in - WriteOutputMacFileUTF8- WriteOutputWinFileIso8859_1- WriteOutputWinFileUTF8- CloseFile  remember to close the file with CloseFile when finished writing. 	*/function OpenOutputFile ( string path ) 	FunctionID 210; 	int x = open ( path, "w" ); 	return x; end/*	Write to a file: Encoding UTF-8, CR converted to LF	*/function WriteOutputMacFileUTF8 ( int FileNo, string data ) 	FunctionID 211; 	write ( FileNo , substitute ( data, "\r", "\n" )) ; 	return "OK";end/*	Write to a file: Encoding ISO-8859-1, CR Converted to CRLF	*/function WriteOutputWinFileIso8859_1 ( int FileNo, string data ) 	FunctionID 212; 	write ( FileNo , from_utf ( substitute ( data, "\r", "\r\n" ), "ISO-8859-1" )) ; 	return "OK";end /*	Close the file	*/function CloseFile ( int FileNo )	FunctionID 213; 	close ( FileNo ) ; 	return "OK"; end/*	Write to a file: Encoding UTF-8, CR Converted to CRLF	*/function WriteOutputWinFileUTF8 ( int FileNo, string data ) 	FunctionID 214; 	write ( FileNo , substitute ( data, "\r", "\r\n" )) ; 	return "OK";end/*	Formattering av nummer - med komma og 1000 gruppe-skille. 	Her benyttes fast " " som 1000 gruppe skille 	Eksempel fra FileMaker kalkulasjon: ACFU_NumFormat ( beløp, ",")	Der beløp er 12345,2 => 12 345,20	*/function NumFormat  ( float num, string comma ) 	functionID 230; 	string sNum; 	if ( comma != ".") then		sNum = substitute ( format ( "%.2f", num ), ".", comma ) ;  	else		sNum = format ( "%.2f", num ); 	end if		return regex_replace ( "\d{1,3}(?=(\d{3})+(?!\d))", sNum, "$& ") ;  	end/*Copy a document from a document store to users desktop.DocStore: the start path for the archiveArchiveSubPath: The relative path starting from DocStore (including the filename). Designed to be a 	common subpath to be used from both mac and windows, using :, / or \ as direcotory seps. Title: An optional title of the document to be used as target filename (+ extention of the original file ) Example (Win): ACFU_BSBO_SaveDocumentDesktop ( "\\192.168.1.20\vArchive\myDocArchive"; "Customers/11213/Contract.docx"; "Customer 11213 Contract" ) or (mac)ACFU_BSBO_SaveDocumentDesktop ( "vArchive:myDocArchive"; "Customers/11213/Contract.docx"; "Customer 11213 Contract" ) If the user hold the Alt key down while doing this, a File Save dialogue appears for user to select alternate name or location. Else, it will be copied to the users desktop.  */function BSBO_SaveDocumentDesktop (string DocStore, string ArchiveSubPath, string Title)	functionID 231;	if ( DocStore == "" ) then		throw "DocStore for document not set"; 	end if	if ( ArchiveSubPath == "" ) then		throw "ArchiveSubPath for document not set"; 	end if		if ( isMac ) then		DocStore = "/Volumes/" + substitute ( DocStore, ":", "/");	else		DocStore = substitute ( DocStore, "\\", "/");	end if	if ( ! directory_exists ( DocStore ) ) then		throw "Doc Store volume not available: " + DocStore;	end if	if ( right(DocStore, 1)  != "/") then		DocStore += "/"; 	end if		ArchiveSubPath = substitute ( ArchiveSubPath, ":", "/"); 	ArchiveSubPath = substitute ( ArchiveSubPath, "\\", "/"); 	string SourceFile = DocStore + ArchiveSubPath; 	string defname; 	if ( Title == "" ) then		defname = regex_replace("^(.+)/(.+\..+)$", SourceFile, "\2");	else		Title = substitute ( Title, ":", "" ) ; 		Title = substitute ( Title, "/", "" ) ; 		Title = substitute ( Title, "\\", "" ) ; 				string ext = regex_replace("^(.+/)(.+\.)(.+)$", SourceFile, "\3");		defname = Title + "." + ext; 	end if		string newfn; 	bool abort = false; 	if ( int ( @get(ActiveModifierKeys)@ ) == 8 ) then		newfn = save_file_dialogue ("Hvor skal filen lagres?", desktop_directory(), defname) ; 		if ( newfn == "" ) then			abort = true; 		end if	else		 newfn = desktop_directory() + defname; 	end if		print format ( "Kilde:%s\nBestemmelse:%s\n", SourceFile,newfn ) ; 	if ( ! abort ) then		string res = copy_file ( SourceFile, newfn ) ; 		return res; 	else 		return "OK"; 	end ifend/* To Simplify the use of alternate strings on Mac and Windows	Example using the above function from a FM Calculation to work on both platforms	(Shown using hard coded strings, but normally one would use fields from preference table): 	ACFU_BSBO_SaveDocumentDesktop ( ACFU_GetPlatformString ( "vArchive:myDocArchive"; "\\192.168.1.20\vArchive\myDocArchive"); "Customers/11213/Contract.docx"; "Customer 11213 Contract" ) */function GetPlatformString ( string MacString, string WinString ) 	FunctionID 232; 	if ( isWindows ) then		return WinString; 	else		return MacString; 	end ifend/*	To save content of log to a file in users document directory. 	Folder name: ~/Documents/ACFLoggFiles/    creates directory if it does not exists. 	Returns Path to logg file, to be used in Append_Logg. 	Parameters: 		logg : The content to be written to the logg file. 		name : The name part of the full fulename as: YYYYmmdd_hhmmss_<name>_logg.txt	*/function Save_Logg ( string logg , string name)	FunctionID 233; 	string logdir = documents_directory()+"ACFLoggFiles";  	string res; 	if ( ! directory_exists ( logdir )) then		res = create_directory (logdir ); 	end if	logg = substitute ( logg, "\r", "\n"); 	string path = logdir+format("/%s_%s_logg.txt", string ( now()+3600, "%Y%m%d_%H%M%S"), name); 	res = delete_file ( path ); 	int x = open ( path, "w"); 	if ( isWindows ) then 		write ( x, substitute ( logg, "\n", "\r\n")); 	else		write ( x, logg); 	end if	close ( x ); 	return path; end/*	Append logg entries to previously created logg with Save_Logg. 	*/function Append_Logg ( string logg , string FilePath)	FunctionID 234; 		logg = substitute ( logg, "\r", "\n"); 	int x = open ( FilePath, "wa"); 	if ( isWindows ) then 		write ( x, substitute ( logg, "\n", "\r\n")); 	else		write ( x, logg); 	end if	close ( x ); 	return "OK"; end